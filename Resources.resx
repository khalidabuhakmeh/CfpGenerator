<?xml version="1.0" encoding="utf-8"?>

<root>
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:element name="root" msdata:IsDataSet="true">

        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>1.3</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <data name="The Matt" xml:space="preserve">
        <value>So {technology} has {feature} now. But what is a "{feature}", and more importantly, what does it mean to me? I've been {action} with {technology} for ages now and haven't needed one so far. Why now?

Let's try to figure this whole {feature} thing out. We'll take a look at what it is, how it works, why it needs new syntax, and how it maps to the old-fashioned "{phrase}" that we all know and love. And we'll look at where you'd use it and where you wouldn't. Is it really better than {other technology}?</value>
    </data>
    <data name="The Khalid" xml:space="preserve">
        <value>I hear you want to get good at {technology}. Well, in this talk, we'll discuss what makes {technology} so {adjective}. By the end, you'll be able to build your own {subject}.</value>
    </data>
</root>